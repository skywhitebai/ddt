<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sky.ddt.dao.custom.CustomFinancialStatementMapper">

    <select id="getFinancialStatementResponse"  resultType="com.sky.ddt.dto.finance.response.FinancialStatementResponse">
        SELECT f.id financeId,f.month,ss.shop_id shopId,s.`shop_name` shopName,p.`developer_user_id` developerUserId,
        ud.`real_name` developerUserName,ss.`salesman_user_id` salesmanUserId,us.`real_name` salesmanUserName,
        ss.`shop_parent_sku` shopParentSku,sku.`sku`,ss.headTripCost,sku.cost_price costPrice,ss.shop_sku_id shopSkuId,ss.`shop_sku` shopSku,p.`product_code` productCode,
        p.development_level developmentLevel,
        IFNULL(ms.saleQuantity,0) saleQuantity,
        IFNULL(ms.productSales,0) productSales,
        IFNULL(ms.productSalesTax,0) productSalesTax,
        IFNULL(ms.shippingCredits,0) shippingCredits,
        IFNULL(ms.shippingCreditsTax,0) shippingCreditsTax,
        IFNULL(ms.giftWrapCredits,0) giftWrapCredits,
        IFNULL(ms.giftWrapCreditsTax,0) giftWrapCreditsTax,
        IFNULL(ms.promotionalRebates,0) promotionalRebates,
        IFNULL(ms.promotionalRebatesTax,0) promotionalRebatesTax,
        IFNULL(ms.marketplaceWithheldTax,0) marketplaceWithheldTax,
        IFNULL(ms.sellingFees,0) sellingFees,
        IFNULL(ms.fbaFees,0) fbaFees,
        IFNULL(ms.otherTransactionFees,0) otherTransactionFees,
        IFNULL(ms.other,0) other,
        IFNULL(ms.total,0) total,

        IFNULL(ms.refundSaleQuantity,0) refundSaleQuantity,
        IFNULL(ms.refundProductSales,0) refundProductSales,
        IFNULL(ms.refundProductSalesTax,0) refundProductSalesTax,
        IFNULL(ms.refundShippingCredits,0) refundShippingCredits,
        IFNULL(ms.refundShippingCreditsTax,0) refundShippingCreditsTax,
        IFNULL(ms.refundGiftWrapCredits,0) refundGiftWrapCredits,
        IFNULL(ms.refundGiftWrapCreditsTax,0) refundGiftWrapCreditsTax,
        IFNULL(ms.refundPromotionalRebates,0) refundPromotionalRebates,
        IFNULL(ms.refundPromotionalRebatesTax,0) refundPromotionalRebatesTax,
        IFNULL(ms.refundMarketplaceWithheldTax,0) refundMarketplaceWithheldTax,
        IFNULL(ms.refundSellingFees,0) refundSellingFees,
        IFNULL(ms.refundFbaFees,0) refundFbaFees,
        IFNULL(ms.refundOtherTransactionFees,0) refundOtherTransactionFees,
        IFNULL(ms.refundOther,0) refundOther,
        IFNULL(ms.refundTotal,0) refundTotal,

        0 fbaCustomerReturnPerUnitFee,

        IFNULL(ld.lightningDealFee,0) lightningDealFee,
        IFNULL(maf.costOfAdvertising,0) costOfAdvertising,

        IFNULL(ms.fbaInventoryReimbursementCustomerReturn,0) fbaInventoryReimbursementCustomerReturn,
        IFNULL(ms.fbaInventoryReimbursementDamagedWarehouse,0) fbaInventoryReimbursementDamagedWarehouse,
        IFNULL(ms.fbaInventoryReimbursementCustomerServiceIssue,0) fbaInventoryReimbursementCustomerServiceIssue,
        IFNULL(ms.fbaInventoryReimbursementFeeCorrection,0) fbaInventoryReimbursementFeeCorrection,
        IFNULL(ms.fbaInventoryReimbursementGeneralAdjustment,0) fbaInventoryReimbursementGeneralAdjustment,
        IFNULL(ms.fbaInventoryReimbursementLostInbound,0) fbaInventoryReimbursementLostInbound,
        IFNULL(ms.fbaInventoryReimbursementLostWarehouse,0) fbaInventoryReimbursementLostWarehouse,
        IFNULL(ms.nonSubscriptionFeeAdjustment,0) nonSubscriptionFeeAdjustment,
        IFNULL(ms.fbaInventoryPlacementServiceFee,0) fbaInventoryPlacementServiceFee,

        IFNULL(msf.fbaInventoryStorageFee,0) fbaInventoryStorageFee,
        IFNULL(lsf.fbaLongTermStorageFee,0) fbaLongTermStorageFee,
        IFNULL(df.fbaRemovalOrderDisposalFee,0) fbaRemovalOrderDisposalFee,

        IFNULL(cp.couponRedemptionFee,0) couponRedemptionFee,
        IFNULL(erpf.earlyReviewerProgramFee,0) earlyReviewerProgramFee,


        IFNULL(dd.sellableRequestedQuantity,0) sellableRequestedQuantity,
        IFNULL(dd.sellableRequestedQuantity,0)*(IFNULL(sku.`cost_price`,0)+IFNULL(ss.`head_trip_cost`,0)) sellableCost,
        IFNULL(dd.unsellableRequestedQuantity,0) unsellableRequestedQuantity,
        IFNULL(dd.unsellableRequestedQuantity,0)*(IFNULL(sku.`cost_price`,0)+IFNULL(ss.`head_trip_cost`,0)) unsellableCost,

        IFNULL(ms.saleQuantity,0)*IFNULL(sku.`cost_price`,0) procurementCost,
        IFNULL(ms.saleQuantity,0)*IFNULL(ss.`head_trip_cost`,0) fbaHeadTripCost,
        0 headDeductionFee,
        IFNULL(idi.initialQuantity,0) initialQuantity,
        IFNULL(idi.initialQuantity,0)*(IFNULL(sku.`cost_price`,0)+IFNULL(ss.`head_trip_cost`,0)) initialInventoryCost,
        IFNULL(idf.finalQuantity,0) finalQuantity,
        IFNULL(idf.finalQuantity,0)*(IFNULL(sku.`cost_price`,0)+IFNULL(ss.`head_trip_cost`,0)) finalInventoryCost,

        IFNULL(idi.initialQuantity,0) initialQuantity,
        IFNULL(idi.initialQuantity,0)*(IFNULL(sku.`cost_price`,0)+IFNULL(ss.`head_trip_cost`,0)) initialInventoryCost,
        IFNULL(idf.finalQuantity,0) finalQuantity,
        IFNULL(idf.finalQuantity,0)*(IFNULL(sku.`cost_price`,0)+IFNULL(ss.`head_trip_cost`,0)) finalInventoryCost,
        IFNULL(ma.manualAdjustment,0) manualAdjustment,
        case when ss.create_time is null then 0 when DATE_ADD(ss.create_time,INTERVAL 14 month)<![CDATA[  > ]]>f.month then 1 else 0 end newProduct,
        TIMESTAMPDIFF(MONTH,ss.create_time,f.month) productMonth
        FROM `finance` f
        INNER JOIN shop s ON f.`shop_id`=s.`shop_id`
        INNER JOIN  shop_sku ss ON f.`shop_id`=ss.`shop_id`
        LEFT JOIN  sku ON ss.`sku_id`=sku.`sku_id`
        LEFT JOIN product p ON sku.`product_id`=p.`product_id`
        LEFT JOIN USER ud ON p.`developer_user_id`=ud.`user_id`
        LEFT JOIN USER us ON ss.`salesman_user_id`=us.`user_id`
        LEFT JOIN
        (SELECT shop_sku_id,SUM(CASE WHEN  ms.`type`='Order' THEN IFNULL(ms.`quantity`,0) ELSE 0 END)  saleQuantity,
        SUM(CASE WHEN  ms.`type`='Order' THEN IFNULL(ms.`product_sales`,0) ELSE 0 END)  productSales,
        SUM(CASE WHEN  ms.`type`='Order' THEN IFNULL(ms.`product_sales_tax`,0) ELSE 0 END)  productSalesTax,
        SUM(CASE WHEN  ms.`type`='Order' THEN IFNULL(ms.`shipping_credits`,0) ELSE 0 END)  shippingCredits,
        SUM(CASE WHEN  ms.`type`='Order' THEN IFNULL(ms.`shipping_credits_tax`,0) ELSE 0 END)  shippingCreditsTax,
        SUM(CASE WHEN  ms.`type`='Order' THEN IFNULL(ms.`gift_wrap_credits`,0) ELSE 0 END)  giftWrapCredits,
        SUM(CASE WHEN  ms.`type`='Order' THEN IFNULL(ms.`giftwrap_credits_tax`,0) ELSE 0 END)  giftWrapCreditsTax,
        SUM(CASE WHEN  ms.`type`='Order' THEN IFNULL(ms.`promotional_rebates`,0) ELSE 0 END)  promotionalRebates,
        SUM(CASE WHEN  ms.`type`='Order' THEN IFNULL(ms.`promotional_rebates_tax`,0) ELSE 0 END)  promotionalRebatesTax,
        SUM(CASE WHEN  ms.`type`='Order' THEN IFNULL(ms.`marketplace_withheld_tax`,0) ELSE 0 END)  marketplaceWithheldTax,
        SUM(CASE WHEN  ms.`type`='Order' THEN IFNULL(ms.`selling_fees`,0) ELSE 0 END)  sellingFees,
        SUM(CASE WHEN  ms.`type`='Order' THEN IFNULL(ms.`fba_fees`,0) ELSE 0 END)  fbaFees,
        SUM(CASE WHEN  ms.`type`='Order' THEN IFNULL(ms.`other_transaction_fees`,0) ELSE 0 END)  otherTransactionFees,
        SUM(CASE WHEN  ms.`type`='Order' THEN IFNULL(ms.`other`,0) ELSE 0 END)  other,
        SUM(CASE WHEN  ms.`type`='Order' THEN IFNULL(ms.`total`,0) ELSE 0 END)  total,

        SUM(CASE WHEN  ms.`type`='Refund' THEN IFNULL(ms.`quantity`,0) ELSE 0 END)  refundSaleQuantity,
        SUM(CASE WHEN  ms.`type`='Refund' THEN IFNULL(ms.`product_sales`,0) ELSE 0 END)  refundProductSales,
        SUM(CASE WHEN  ms.`type`='Refund' THEN IFNULL(ms.`product_sales_tax`,0) ELSE 0 END)  refundProductSalesTax,
        SUM(CASE WHEN  ms.`type`='Refund' THEN IFNULL(ms.`shipping_credits`,0) ELSE 0 END)  refundShippingCredits,
        SUM(CASE WHEN  ms.`type`='Refund' THEN IFNULL(ms.`shipping_credits_tax`,0) ELSE 0 END)  refundShippingCreditsTax,
        SUM(CASE WHEN  ms.`type`='Refund' THEN IFNULL(ms.`gift_wrap_credits`,0) ELSE 0 END)  refundGiftWrapCredits,
        SUM(CASE WHEN  ms.`type`='Refund' THEN IFNULL(ms.`giftwrap_credits_tax`,0) ELSE 0 END)  refundGiftWrapCreditsTax,
        SUM(CASE WHEN  ms.`type`='Refund' THEN IFNULL(ms.`promotional_rebates`,0) ELSE 0 END)  refundPromotionalRebates,
        SUM(CASE WHEN  ms.`type`='Refund' THEN IFNULL(ms.`promotional_rebates_tax`,0) ELSE 0 END)  refundPromotionalRebatesTax,
        SUM(CASE WHEN  ms.`type`='Refund' THEN IFNULL(ms.`marketplace_withheld_tax`,0) ELSE 0 END)  refundMarketplaceWithheldTax,
        SUM(CASE WHEN  ms.`type`='Refund' THEN IFNULL(ms.`selling_fees`,0) ELSE 0 END)  refundSellingFees,
        SUM(CASE WHEN  ms.`type`='Refund' THEN IFNULL(ms.`fba_fees`,0) ELSE 0 END)  refundFbaFees,
        SUM(CASE WHEN  ms.`type`='Refund' THEN IFNULL(ms.`other_transaction_fees`,0) ELSE 0 END)  refundOtherTransactionFees,
        SUM(CASE WHEN  ms.`type`='Refund' THEN IFNULL(ms.`other`,0) ELSE 0 END)  refundOther,
        SUM(CASE WHEN  ms.`type`='Refund' THEN IFNULL(ms.`total`,0) ELSE 0 END)  refundTotal,

        SUM(CASE WHEN  ms.`type`='Adjustment' AND ms.`description`='FBA Inventory Reimbursement - Customer Return' THEN IFNULL(ms.`total`,0) ELSE 0 END)  fbaInventoryReimbursementCustomerReturn,
        SUM(CASE WHEN  ms.`type`='Adjustment' AND ms.`description`='FBA Inventory Reimbursement - Damaged:Warehouse' THEN IFNULL(ms.`total`,0) ELSE 0 END)  fbaInventoryReimbursementDamagedWarehouse,
        SUM(CASE WHEN  ms.`type`='Adjustment' AND ms.`description`='FBA Inventory Reimbursement - Customer Service Issue' THEN IFNULL(ms.`total`,0) ELSE 0 END)  fbaInventoryReimbursementCustomerServiceIssue,
        SUM(CASE WHEN  ms.`type`='Adjustment' AND ms.`description`='FBA Inventory Reimbursement - Fee Correction' THEN IFNULL(ms.`total`,0) ELSE 0 END)  fbaInventoryReimbursementFeeCorrection,
        SUM(CASE WHEN  ms.`type`='Adjustment' AND ms.`description`='FBA Inventory Reimbursement - General Adjustment' THEN IFNULL(ms.`total`,0) ELSE 0 END)  fbaInventoryReimbursementGeneralAdjustment,
        SUM(CASE WHEN  ms.`type`='Adjustment' AND ms.`description`='FBA Inventory Reimbursement - Lost:Inbound' THEN IFNULL(ms.`total`,0) ELSE 0 END)  fbaInventoryReimbursementLostInbound,
        SUM(CASE WHEN  ms.`type`='Adjustment' AND ms.`description`='FBA Inventory Reimbursement - Lost:Warehouse' THEN IFNULL(ms.`total`,0) ELSE 0 END)  fbaInventoryReimbursementLostWarehouse,
        SUM(CASE WHEN  ms.`type`='Adjustment' AND ms.`description`='Non-subscription Fee Adjustment' THEN IFNULL(ms.`total`,0) ELSE 0 END)  nonSubscriptionFeeAdjustment,
        SUM(CASE WHEN  ms.`type`='Adjustment' AND ms.`description`='FBA Inventory Placement Service Fee' THEN IFNULL(ms.`total`,0) ELSE 0 END)  fbaInventoryPlacementServiceFee
        FROM `monthly_sales` ms WHERE `finance_id`=#{financeId} GROUP BY `shop_sku_id`) ms
        ON ms.`shop_sku_id`=ss.`shop_sku_id`
        LEFT JOIN
        (SELECT SUM(IFNULL(ld.`fee`,0))  lightningDealFee,ld.shop_sku_id FROM lighting_deal ld WHERE finance_id=#{financeId}  GROUP BY `shop_sku_id`) ld
        ON ld.shop_sku_id=ss.`shop_sku_id`
        LEFT JOIN
        (SELECT SUM(IFNULL(maf.`cost`,0))*-1  costOfAdvertising,shop_sku_id FROM `monthly_advertising_fee` maf WHERE finance_id=#{financeId}  GROUP BY `shop_sku_id`) maf
        ON maf.shop_sku_id=ss.`shop_sku_id`
        LEFT JOIN
        (SELECT SUM(IFNULL(msf.`estimated_monthly_storage_fee`,0)*-1) fbaInventoryStorageFee,shop_sku_id FROM monthly_storage_fee msf WHERE finance_id=#{financeId}  GROUP BY `shop_sku_id`) msf
        ON msf.shop_sku_id=ss.shop_sku_id
        LEFT JOIN
        (SELECT SUM(IFNULL(lsf.`mo_12_long_terms_storage_fee`,0)*-1) fbaLongTermStorageFee,shop_sku_id FROM `long_storage_fee` lsf WHERE `finance_id`=#{financeId}  GROUP BY `shop_sku_id`) lsf
        ON lsf.shop_sku_id=ss.shop_sku_id
        LEFT JOIN
        (SELECT SUM(IFNULL(df.`removal_fee`,0)*-1) fbaRemovalOrderDisposalFee,shop_sku_id FROM `destruction_fee` df WHERE `finance_id`=#{financeId}  GROUP BY `shop_sku_id`) df
        ON df.shop_sku_id=ss.shop_sku_id
        LEFT JOIN
        (SELECT SUM(IFNULL(cp.`fee`,0)) couponRedemptionFee,shop_sku_id FROM `coupon` cp WHERE `finance_id`=#{financeId}  GROUP BY `shop_sku_id`) cp
        ON cp.shop_sku_id=ss.shop_sku_id
        LEFT JOIN
        (SELECT SUM(IFNULL(erpf.`fee`,0)) earlyReviewerProgramFee,shop_sku_id FROM `early_reviewer_program_fee` erpf WHERE `finance_id`=#{financeId}  GROUP BY `shop_sku_id`) erpf
        ON erpf.shop_sku_id=ss.shop_sku_id
        LEFT JOIN
        (SELECT SUM(CASE WHEN  dd.`disposition`='Sellable' THEN IFNULL(dd.`requested_quantity`,0) ELSE 0 END)  sellableRequestedQuantity,
        SUM(CASE WHEN  dd.`disposition`='Unsellable' THEN IFNULL(dd.`requested_quantity`,0) ELSE 0 END)  unsellableRequestedQuantity,
        shop_sku_id FROM `destruction_details` dd WHERE `finance_id`=#{financeId}  GROUP BY `shop_sku_id`) dd
        ON dd.shop_sku_id=ss.shop_sku_id

        LEFT JOIN
        (SELECT SUM(IFNULL(idi.afn_total_quantity,0)) initialQuantity,shop_sku_id FROM `inventory_details` idi WHERE idi.finance_id =
        (SELECT MAX(fi.id) FROM `finance` fi,finance f WHERE fi.shop_id=f.shop_id AND fi.month=DATE_SUB(f.month,INTERVAL 1 MONTH) AND f.id=#{financeId})  GROUP BY `shop_sku_id`) idi
        ON idi.shop_sku_id=ss.shop_sku_id
        LEFT JOIN
        (SELECT SUM(IFNULL(idf.afn_total_quantity,0)) finalQuantity,shop_sku_id FROM `inventory_details` idf WHERE `finance_id`=#{financeId} GROUP BY `shop_sku_id`) idf
        ON idf.shop_sku_id=ss.shop_sku_id
        LEFT JOIN
        (SELECT SUM(IFNULL(ma.fee,0)) manualAdjustment,shop_sku_id FROM `manual_adjustment` ma WHERE `finance_id`=#{financeId} GROUP BY `shop_sku_id`) ma
        ON ma.shop_sku_id=ss.shop_sku_id

        WHERE f.`id`=#{financeId}
        ORDER BY ss.`shop_parent_sku`,sku.`sku`
    </select>
</mapper>